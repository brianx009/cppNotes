#include<iostream>
#include<string>

using std::cout;
using std::endl;


//Example 1: Example is to show how "Pass by value semantics" works om pointers. In the previous section 4., we saw that when we used normal variables inside of functions, it would not update the local variables inside of int main, instead this would update the values inside of the function that exists outside of int main, and then when we stepped back into int main it would not update these local variables. Now with pointers, we are creating a pointer that we are passing into a function, but inside of the function if we step into it, we see that we are directly modifying the value of the original local variable. This is using the same semantics as we last used is section 4., but pointers actually update the original value. -- Although this doesn't seem like a pass by value, we have to understand that this is still pass by value and that it is making a copy of the memory location when we do the function call inside of int main. Despite it looking like we are modifying the original value directly, we are instead creating a copy of the variable that is being passed in, and because it is pointing to the same memory address, it looks like we are modifying the original pointer and not the copy of the original pointer. Very interesting.

void updateRevenue(double* revenuePtr);     //signature that takes in a pointer

int main(){

  double brianStoreRevenue = 100.00;     //creating a variable

  double* revenuePtr = &brianStoreRevenue;     //creating a pointer that points the memory address of our original varibale

  cout << "brianStoreRevenue before updateRevenue: " << brianStoreRevenue << endl;     //prints out the value of our orignal variable

  updateRevenue(revenuePtr);     //function call on our pointer

  cout << "brianStoreRevenue after updateRevenue: " << brianStoreRevenue << endl;     //prints out the updated value of our original variable
    
  
  return 0;
}

void updateRevenue(double* revenuePtr){
  cout << "Inside of updateRevenue" << endl;
  
  *revenuePtr = (2 * (*revenuePtr));     //reading this line from left to right: *revenuePtr (dereferencing the pointer so we can modify the value that revenuePtr points to(brianStoreRevenue)) = (2 * (*revenuePtr)) (multiplying 2 by the original value inside of our brianStoreRevvenue);
  
}
